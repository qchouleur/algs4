1.1.1.a.	7
1.1.1.b. 	200.0000002
1.1.1.c.	true

1.1.2.a. 	double, 1.618
1.1.2.b.	double, 10.0
1.1.2.c.	boolean, true
1.1.2.d. 	string, "33"

1.1.3.		public static void AreEqual(string[] args) 
		{
			int a = int.Parse(args[0]);
			int b = int.Parse(args[1]);
			int c = int.Parse(args[2]);

			bool areEqual = a == b && a == c && b == c;

			System.Console.WriteLine(areEqual ? "equal" : "not equal");
		}

1.1.4.a.	The then keyword does not exist in java.
1.1.4.b. 	The boolean expression must be enclosed in parentheses.
1.1.4.c. 	Nothing wrong.
1.1.4.d. 	Missing semicolon after the first assignment.

1.1.5.		public static void AreStriclyInZeroOneInterval(double x, double y)
		{
			bool areInInterval = x > 0 && x < 1 && y > 0 && y < 1;
			System.Console.WriteLine(areInInterval);
		}

1.1.6.		The fibonnaci numbers up to the 15th number.

1.1.7.a.	3.00009
1.1.7.b.	499500
1.1.7.c.	10000

1.1.8.a.	b, Print the letter e as expected.
1.1.8.b.	197, Convert the char to int to add the values, print the result.
1.1.8.c. 	e, Adds 4 to 'a' which gives 101, corresponding to the character 'e'.

1.1.9.		public static string ToBinaryString(this int number)
		{
			var binaryStringBuilder = new System.Text.StringBuilder();

			for(int n = number; n > 0; n/=2)
			{
				binaryStringBuilder.Insert(0, n % 2);
			}

			return binaryStringBuilder.ToString();
		}

1.1.10.		It does not allocate memory for a[] by instantiating an array with the new keyword.
		int[] a = new a[10];

1.1.11.		public static void Print2DBoolArray(bool [,] array)
		{
			for(int i = 0; i < array.GetLength(0); i++)
			{
				System.Console.Write(" " + i);
			}
			System.Console.WriteLine();
			
			for(int i = 0; i < array.GetLength(0); i++)
			{
				System.Console.WriteLine(i + " ");
				
				for(int j = 0; j < array.GetLength(1); j++)
				{
					System.Console.Write(array[i,j] ? "*", " ");
				}

				System.Console.WriteLine();
			}
		}

1.1.12.		0
		1
		2
		3	
		4
		5
		6
		7
		8
		9


